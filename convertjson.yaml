swagger: '2.0'
info:
    description: description
    title: 'API documentation : Card'
    license: {url: lien}
host: 'localhost:8080'
basePath: /
tags:
    - {name: controller-_-card, description: 'Controller _ Card'}
paths:
    '/controller/card/{id}': {put: {tags: [controller-_-card], summary: 'retourner toutes les cardes', operationId: UpdateCardUsingPUT, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: card, description: card, required: true, schema: {$ref: '#/definitions/Card'}}, {name: id, in: path, description: id, required: true, type: integer, format: int64}], responses: {'200': {description: OK}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}}}
    '/controller/delete/{id}': {delete: {tags: [controller-_-card], summary: deletecard, operationId: deletecardUsingDELETE, produces: ['*/*'], parameters: [{name: id, in: path, description: id, required: true, type: integer, format: int64}], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}}}
    /controller/deleteall: {delete: {tags: [controller-_-card], summary: deleteall, operationId: deleteallUsingDELETE, produces: ['*/*'], responses: {'200': {description: OK, schema: {type: string}}, '204': {description: 'No Content'}, '401': {description: Unauthorized}, '403': {description: Forbidden}}}}
    /controller/getcard: {get: {tags: [controller-_-card], summary: 'une brève description de l''API', description: 'notes nous permettent de donner beaucoup plus de détails sur les opérations', operationId: getCardUsingGET, produces: ['*/*'], responses: {'200': {description: 'Successfully get schema', schema: {type: array, items: {$ref: '#/definitions/Card'}}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Schema not found'}, '409': {description: 'Schema is in use'}, '500': {description: 'Error get schema'}}}}
    '/controller/getcardid/{id}': {get: {tags: [controller-_-card], summary: getCardbyid, operationId: getCardbyidUsingGET, produces: ['*/*'], parameters: [{name: id, in: path, description: id, required: true, type: integer, format: int64}], responses: {'200': {description: OK, schema: {$ref: '#/definitions/Card'}}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}}}
    /controller/post: {post: {tags: [controller-_-card], summary: CreatCard, operationId: CreatCardUsingPOST, consumes: [application/json], produces: ['*/*'], parameters: [{in: body, name: card, description: card, required: true, schema: {$ref: '#/definitions/Card'}}], responses: {'200': {description: OK, schema: {$ref: '#/definitions/Card'}}, '201': {description: Created}, '401': {description: Unauthorized}, '403': {description: Forbidden}, '404': {description: 'Not Found'}}}}
definitions:
    Card: {type: object, required: [code, id], properties: {code: {type: string, description: 'Code of Card'}, id: {type: integer, format: int64, description: 'id of Card'}}, title: Card}
